import pandas as pd
from google.colab import drive

# Mount Google Drive at the default mount point
drive.mount('/content/drive')

# Read CSV file from Google Drive and load into a DataFrame
df = pd.read_csv('/content/drive/My Drive/stock_data.csv', encoding="ISO-8859-1")
# Print the first few rows of the DataFrame to inspect
print(df.head())

from sklearn.model_selection import train_test_split

# Split the DataFrame into training and test sets (80% train, 20% test)
train, test = train_test_split(df, test_size=0.2, random_state=42)

# Select the 'Text' column from the training set
data = train['Text']
# Replace all non-alphabetic characters with spaces in the text
data = data.str.replace("[^a-zA-Z]", " ", regex=True)

# Convert the Series to a DataFrame for ease of manipulation
data = pd.DataFrame(data)
# Rename the column to 'Text'
data.columns = ['Text']

# Convert all text to lowercase
data['Text'] = data['Text'].str.lower()
# Convert the 'Text' column to a list of strings (headlines)
headlines = data['Text'].tolist()

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.ensemble import RandomForestClassifier

# Create a CountVectorizer with bi-grams (pairs of consecutive words)
countvector = CountVectorizer(ngram_range=(2, 2))
# Fit the vectorizer to the training data and transform the text data into a bag-of-words representation
traindataset = countvector.fit_transform(headlines)

# Create a RandomForest Classifier with 200 trees and using entropy as the criterion
randomclassifier = RandomForestClassifier(n_estimators=200, criterion='entropy')
# Train the classifier on the transformed training data and the corresponding sentiments
randomclassifier.fit(traindataset, train['Sentiment'])

# Preprocess the test text data by replacing non-alphabetic characters and converting to lowercase
test_transform = test['Text'].str.replace("[^a-zA-Z]", " ", regex=True).str.lower().tolist()
# Transform the preprocessed test data using the fitted vectorizer
test_dataset = countvector.transform(test_transform)
# Make predictions on the transformed test data using the trained classifier
predictions = randomclassifier.predict(test_dataset)

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Compute and print the confusion matrix
matrix = confusion_matrix(test['Sentiment'], predictions)
print("Confusion Matrix:\n", matrix)

# Compute and print the accuracy score
score = accuracy_score(test['Sentiment'], predictions)
print("Accuracy Score:", score)

# Compute and print the classification report (precision, recall, F1-score for each class)
report = classification_report(test['Sentiment'], predictions)
print("Classification Report:\n", report)
